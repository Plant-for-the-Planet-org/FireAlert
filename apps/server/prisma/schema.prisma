generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    guid            String?   @unique @default(uuid())
    sub             String?
    name            String?
    email           String?   @unique
    emailVerified   Boolean?
    detectionMethod String?
    isPlanetRO      Boolean?
    image           String?
    avatar          String?
    deletedAt       DateTime?
    isVerified      Boolean?
    lastLogin       DateTime?
    signupDate      DateTime  @default(now())
    roles           Role      @default(ROLE_CLIENT)

    accounts Account[]
    sessions Session[]

    alertMethods AlertMethod[]
    sites        Site[]
    projects     Project[]
}

enum Role {
    ROLE_CLIENT
    ROLE_ADMIN
    ROLE_SUPPORT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Fire Alert Schema

model AlertMethod {
    id                String    @id @default(cuid())
    guid              String?   @unique @default(uuid())
    method            String?
    destination       String?
    isVerified        Boolean?
    isEnabled         Boolean?
    deletedAt         DateTime?
    deviceType        String?
    notificationToken String?
    userId            String
    user              User      @relation(fields: [userId], references: [id])
}

model Site {
    id          String      @id @default(cuid())
    guid        String?     @unique @default(uuid())
    name        String?
    type        SiteType?
    geometry    Json?
    radius      SiteRadius?
    isMonitored Boolean?    @default(true)
    lastSynced  DateTime?
    deletedAt   DateTime?
    projectId   String?
    lastUpdated DateTime?
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    project     Project?    @relation(fields: [projectId], references: [id])
    alerts      Alert[]
}

enum SiteType {
    Point
    Polygon
    MultiPolygon
}

enum SiteRadius {
    inside
    within5km
    within10km
    within100km
}

model Project {
    id          String    @id
    name        String
    slug        String?
    lastUpdated DateTime?
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    sites       Site[]
}

model Alert {
    id         String    @id @default(cuid())
    guid       String?   @unique @default(uuid())
    type       String?
    eventDate  DateTime?
    detectedBy String?
    confidence Int?
    latitude   Float?
    longitude  Float?
    frp        Float?
    isRead     Boolean?
    deletedAt  DateTime?

    siteId String
    site   Site   @relation(fields: [siteId], references: [id])
}
