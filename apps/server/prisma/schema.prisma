generator client {
    provider = "prisma-client-js"
}

datasource db {
// <<<<<<< HEAD
//     provider = "postgresql"
//     url      = "postgres://jorgo:@localhost:5432/fire-alert"
// =======
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
// >>>>>>> 795dd6432d87898cd5ae7aad4f4b429511f6e3cc
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String        @id @default(cuid())
    sub              String?
    name             String?
    email            String        @unique
    emailVerified    Boolean       @default(false)
    useGeostationary Boolean       @default(false)
    isPlanetRO       Boolean?
    image            String?
    avatar           String?
    deletedAt        DateTime?
    isVerified       Boolean?
    lastLogin        DateTime?
    signupDate       DateTime      @default(now())
    roles            Role          @default(ROLE_CLIENT)
    accounts         Account[]
    alertMethods     AlertMethod[]
    projects         Project[]
    sessions         Session[]
    sites            Site[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AlertMethod {
    id                String                 @id @default(cuid())
    method            AlertMethodMethod
    destination       String
    isVerified        Boolean                @default(false)
    isEnabled         Boolean                @default(false)
    deletedAt         DateTime?
    deviceType        AlertMethodDeviceType?
    notificationToken String?
    userId            String
    tokenSentCount    Int                    @default(0)
    lastTokenSentDate DateTime?
    user              User                   @relation(fields: [userId], references: [id])

    @@unique([destination, userId])
}

// <<<<<<< HEAD
// model Site {
//     id                   String          @id @default(cuid())
//     name                 String?
//     type                 SiteType
//     geometry             Json
//     detectionCoordinates Json
//     radius               Int             @default(0)
//     isMonitored          Boolean         @default(true)
//     lastSynced           DateTime?
//     deletedAt            DateTime?
//     projectId            String?
//     lastUpdated          DateTime?
//     userId               String
//     project              Project?        @relation(fields: [projectId], references: [id])
//     user                 User            @relation(fields: [userId], references: [id])
//     alerts               SiteAlert[]
//     siteDetection        SiteDetection[]
// =======
    model Site {
        id                   String     @id @default(cuid())
        remoteId             String?
        name                 String?
        origin               SiteOrigin @default(firealert)
        type                 SiteType
        geometry             Json
        detectionCoordinates Json
        radius               Int        @default(0)
        isMonitored          Boolean    @default(true)
        deletedAt            DateTime?
        projectId            String?
        lastUpdated          DateTime?
        userId               String
        alerts               Alert[]
        project              Project?   @relation(fields: [projectId], references: [id])
        user                 User       @relation(fields: [userId], references: [id])
    }

enum SiteOrigin {
    firealert
    ttc
// >>>>>>> 795dd6432d87898cd5ae7aad4f4b429511f6e3cc
}

model Project {
    id          String    @id
    name        String
    slug        String?
    lastUpdated DateTime?
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    sites       Site[]
}

model GeoEventProvider {
// <<<<<<< HEAD
//     id     String            @id @default(cuid())
//     slug   AlertProviderSlug
//     type   AlertType
//     source String
//     config Json?
// }

// model SiteAlert {
//     id         String          @id @default(cuid())
//     type       AlertType
//     eventDate  DateTime
//     detectedBy AlertDetectedBy
//     confidence AlertConfidence
//     latitude   Float
//     longitude  Float
//     frp        Float
//     processed  Boolean         @default(false)
//     deletedAt  DateTime?
//     outside    Float?
//     siteId     String
//     site       Site            @relation(fields: [siteId], references: [id])
// }

// model GeoEvent {
//     id         String           @id @default(cuid())
//     type       AlertType
//     latitude   Float
//     longitude  Float
//     date       DateTime         @default(now())
//     confidence AlertConfidence
//     detectedBy AlertDetectedBy
//     processed  Boolean          @default(false)
//     radius     Int?
//     source     EventAreasSource
// }

// model SiteDetection {
//     id                String @id
//     siteId            String
//     detectionGeometry String
//     Site              Site   @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// /// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
// model spatial_ref_sys {
//     srid      Int     @id
//     auth_name String? @db.VarChar(256)
//     auth_srid Int?
//     srtext    String? @db.VarChar(2048)
//     proj4text String? @db.VarChar(2048)
// =======
    id        String                    @id @default(cuid())
    type      AlertType
    isActive  Boolean
    source    GeoEventSource
    sourceKey GeoEventProviderSourceKey
    config    Json // Must have a url, and api key
}
enum GeoEventSource {
    FIRMS
}
enum GeoEventProviderSourceKey {
    LANDSAT_NRT
    MODIS_NRT
    MODIS_SP
    VIIRS_NOAA20_NRT
    VIIRS_SNPP_NRT
    VIIRS_SNPP_SP
}

model GeoEvent {
    id          String                      @id @default(cuid())
    type        AlertType
    latitude    Float
    longitude   Float
    eventDate   DateTime                    @default(now())
    confidence  AlertConfidence
    isProcessed Boolean                     @default(false)
    source      GeoEventSource
    detectedBy  GeoEventDetectionInstrument
    radius      Int?
    data        Json?
}

model Alert {
    id          String                      @id @default(cuid())
    type        AlertType
    latitude    Float
    longitude   Float
    eventDate   DateTime
    detectedBy  GeoEventDetectionInstrument
    confidence  AlertConfidence
    isDelivered Boolean                     @default(false)
    deletedAt   DateTime?
    outside     Int?
    data        Json?
    siteId      String
    site        Site                        @relation(fields: [siteId], references: [id])
// >>>>>>> 795dd6432d87898cd5ae7aad4f4b429511f6e3cc
}

enum Role {
    ROLE_CLIENT
    ROLE_ADMIN
    ROLE_SUPPORT
}

enum AlertMethodMethod {
    email
    sms
    device
    whatsapp
    webhook
}

enum AlertMethodDeviceType {
    ios
    android
}

enum SiteType {
    Point
    Polygon
    MultiPolygon
}

enum GeoEventDetectionInstrument {
    MODIS
    VIIRS
    LANDSAT
    GEOSTATIONARY
}

enum AlertConfidence {
    high
    medium
    low
}

enum AlertType {
    fire
}
