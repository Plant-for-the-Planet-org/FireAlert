generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_PRISMA_URL")
    directUrl         = env("DATABASE_URL_NON_POOLING")
    shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
    id               String        @id @default(cuid())
    sub              String?       @unique
    name             String?
    email            String        @unique
    emailVerified    Boolean       @default(false)
    detectionMethods Json // ["MODIS","VIIRS","LANDSAT","GEOSTATIONARY"]
    isPlanetRO       Boolean?
    image            String?
    deletedAt        DateTime?
    isVerified       Boolean?
    lastLogin        DateTime?
    signupDate       DateTime      @default(now())
    roles            Role          @default(ROLE_CLIENT)
    alertMethods     AlertMethod[]
    projects         Project[]
    sites            Site[]
    remoteId         String?
}

model VerificationRequest {
    id            String      @id @default(cuid())
    token         String      @unique
    expires       DateTime
    createdAt     DateTime    @default(now())
    updatedAt     DateTime?   @updatedAt
    alertMethodId String      @unique
    alertMethod   AlertMethod @relation(fields: [alertMethodId], references: [id])

    @@unique([id, token])
}

model AlertMethod {
    id                  String               @id @default(cuid())
    method              String
    destination         String
    isVerified          Boolean              @default(false)
    isEnabled           Boolean              @default(false)
    deletedAt           DateTime?
    deviceName          String?
    deviceId            String?
    tokenSentCount      Int                  @default(0)
    lastTokenSentDate   DateTime?
    userId              String
    failCount           Int                  @default(0)
    user                User                 @relation(fields: [userId], references: [id])
    verificationRequest VerificationRequest?

    @@unique([destination, userId, method])
}

model Site {
    id                String                   @id @default(cuid())
    remoteId          String?
    name              String?
    origin            String                   @default("firealert")
    type              SiteType
    geometry          Json
    radius            Int                      @default(0)
    isMonitored       Boolean                  @default(true)
    deletedAt         DateTime?
    projectId         String?
    lastUpdated       DateTime?
    userId            String
    slices            Json? // Will be something like ["1","2"] or ["3"] or ["1"] or ["7","8"]
    detectionGeometry Unsupported("geometry")?
    originalGeometry  Unsupported("geometry")?
    // When we make site migration, we need to modify SQL statement that defines the detectionGeometry from "String" to "GEOMETRY". 
    // As prisma is not able to handle it, but we need it for our triggers to work
    alerts            SiteAlert[]
    project           Project?                 @relation(fields: [projectId], references: [id])
    user              User                     @relation(fields: [userId], references: [id])
}

model Project {
    id          String    @id
    name        String
    slug        String?
    lastUpdated DateTime?
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    sites       Site[]
}

model GeoEventProvider {
    id             String    @id @default(cuid())
    name           String?
    description    String?
    type           String // Fire
    clientApiKey   String    @unique
    clientId       String // LANDSAT_NRT
    fetchFrequency Int?
    isActive       Boolean
    lastRun        DateTime?
    config         Json
}

model GeoEvent {
    id                       String                   @id @default(cuid())
    type                     String // Fire
    latitude                 Float
    longitude                Float
    eventDate                DateTime
    geometry                 Unsupported("geometry")?
    confidence               AlertConfidence
    isProcessed              Boolean                  @default(false)
    geoEventProviderClientId String // LANDSAT_NRT
    geoEventProviderId       String
    radius                   Int?
    slice                    String // "1" or "2" or "8"
    data                     Json?
}

model SiteAlert {
    id            String          @id @default(cuid())
    siteId        String
    site          Site            @relation(fields: [siteId], references: [id])
    notifications Notification[]
    type          String //Fire
    latitude      Float
    longitude     Float
    eventDate     DateTime
    detectedBy    String //GeoEventProviderClientId
    confidence    AlertConfidence
    isProcessed   Boolean         @default(false)
    deletedAt     DateTime?
    distance      Int
    data          Json?
}

model Notification {
    id          String    @id @default(cuid())
    siteAlertId String
    siteAlert   SiteAlert @relation(fields: [siteAlertId], references: [id])
    alertMethod String
    destination String
    sentAt      DateTime?
    isDelivered Boolean   @default(false)
}

// TODO: Change siteOrigin to text

enum Role {
    ROLE_CLIENT
    ROLE_ADMIN
    ROLE_SUPPORT
}

enum SiteType {
    Point
    Polygon
    MultiPolygon
}

enum AlertConfidence {
    high
    medium
    low
}
